library(vcdExtra)
confint(df.logit,level = 0.98,method = "Wald")
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr")
install.packages("vcdExtra", dependencies = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(vcdExtra)
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
remove.packages("purrr", lib="~/R/win-library/4.1")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
knitr::opts_chunk$set(echo = TRUE)
library(vcdExtra)
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
install.packages("cli")
knitr::opts_chunk$set(echo = TRUE)
library(vcdExtra)
CMHtest(df5, rscores = c(1,3,5))
library(vcdExtra)
CMHtest(df5, rscores = c(1,3,5))
library(vcdExtra)
CMHtest(df, rscores = c(1,3,5))
library(vcdExtra)
CMHtest(newdf, rscores = c(1,3,5))
observed <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(observed) <- c("Unfavorable", "Favorable")
rownames(observed) <- c("Low", "Medium", "High")
observed <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(observed) <- c("Unfavorable", "Favorable")
rownames(observed) <- c("Low", "Medium", "High")
observed
library(vcdExtra)
CMHtest(observed, rscores = c(1,3,5))
observed <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(observed) <- c("Unfavorable", "Favorable")
rownames(observed) <- c("Low", "Medium", "High")
dimnames(observed) <- list(StressLevel, Decision)
observed <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(observed) <- c("Unfavorable", "Favorable")
rownames(observed) <- c("Low", "Medium", "High")
dimnames(observed) <- list("StressLevel", "Decision")
df <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(df) <- c("Unfavorable", "Favorable")
rownames(df) <- c("Low", "Medium", "High")
dimnames(df) <- list("StressLevel", "Decision")
df <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(df) <- c("Unfavorable", "Favorable")
rownames(df) <- c("Low", "Medium", "High")
df
df5 <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(df5) <- c("Unfavorable", "Favorable")
rownames(df5) <- c("Low", "Medium", "High")
df5
library(vcdExtra)
CMHtest(df5, rscores = c(1,2,3))
library(vcdExtra)
CMHtest(df5, rscores = c(1,2,3), cscores = c(0,1))
library(vcdExtra)
CMHtest(df5, rscores = c(1,2,3), cscores = c(0,1))
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
prop.yes=fav/(fav+unfav)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(fav, unfav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
knitr::opts_chunk$set(echo = TRUE)
df <- matrix(c(75, 80, 155, 50, 100, 150), nrow = 2, byrow = TRUE)
rownames(df) <- c("Existing", "Experimental")
colnames(df) <- c("Yes", "No","Total")
df
prop1 = df[1,1]/df[1,3]
prop1
prop2 = df[2,1]/df[2,3]
prop2
diff = prop1-prop2
diff
#standard error
se <- sqrt((prop1*(1-prop1)/df[1,3]) + (prop2*(1-prop2)/df[2,3]))
se
# 99% confidence interval
lower <- diff - 2.58*se
upper <- diff + 2.58*se
lower
upper
df1 <- matrix(c(75, 80, 50, 100), nrow = 2, byrow = TRUE)
rownames(df1) <- c("Existing", "Experimental")
colnames(df1) <- c("Yes", "No")
chisq.test(df1,correct = FALSE)
df3 <-
matrix(c(20,2,14,3),
byrow = TRUE,
nrow = 2,
dimnames = list(Treatment = c("Surgery","Radiation Therapy"),
Cancer = c("Controlled", "Not Controlled")))
df3
fisher.test(df3, alternative = "two.sided")
df4 <-
matrix(c(483,477,1101,1121),
byrow = TRUE,
nrow = 2,
dimnames = list(Exercise = c("Regular","other"),
Personality_Type = c("A", "B")))
df4
#Chi Square independence test
chisq.test(df4)
#G test of independence
library(RVAideMemoire)
gtest <- G.test(df4)
gtest
#Chi Square Pearson residuals
residuals(chisq.test(df4))
df5 <- matrix(c(20, 65, 32, 85, 95, 120), nrow = 3, byrow = TRUE)
colnames(df5) <- c("Unfavorable", "Favorable")
rownames(df5) <- c("Low", "Medium", "High")
df5
library(vcdExtra)
CMHtest(df5, rscores = c(1,2,3), cscores = c(0,1))
library(vcdExtra)
CMHtest(df5, rscores = c(1,2,3))
confint(df.logit,level = 0.98,method = "Wald")
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
prop.yes=fav/(fav+unfav)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(fav, unfav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
#chisq. goodness of fit
res <- residuals(df.logit, type = "deviance")
# perform the goodness of fit test
chisq.test(res)
any(is.na(res))  # checks for missing values
any(res < 0)     # checks for negative values
any(!is.finite(res))  #
#chisq. goodness of fit
res <- residuals(df.logit, type = "deviance")
# perform the goodness of fit test
chisq.test(abs(res))
hoslem.test(df5, df.logit)
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(df5, df.logit)
hoslem.test(df5$fav, df.logit$fav)
hoslem.test(df.logit$fav, df.logit$fitted)
library(ResourceSelection)
hoslem.test(df.logit$fav, df.logit$fitted)
pred = predict(df.logfit,type = "response")
pred = predict(df.logit,type = "response")
groups = cut(pred,breaks = 10)
hostem.test(df.logit,groups)
hoslem.test(df.logit,groups)
install.packages("glmtoolbox")
library(glmtoolbox)
hltest(df.logit)
# perform Hosmer Lemeshow goodness of fit test
library(glmtoolbox)
hltest(df.logit)
# Pearson Residuals
chisq.test(df5)$residuals
# Standard Residuals
stdres2 <- chisq.test(df5)$stdres
stdres2
mosaic(df5, gp = shading_Friendly, residuals = stdres2, residuals_type = "Std\nresiduals", labeling = labeling_residuals)
# Pearson Residuals
df.logit$residuals
# Standard Residuals
df.logit$stdres
# Pearson Residuals
df.logit$residuals
# Standard Residuals
df.logit$stdres
mosaic(df5, gp = shading_Friendly, residuals = stdres2, residuals_type = "Std\nresiduals", labeling = labeling_residuals)
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
prop.yes=fav/(fav+unfav)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(unfav, fav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
prop.yes=fav/(fav+unfav)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(fav, unfav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
prop.yes=fav/(fav+unfav)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(unfav, fav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
Stress=c(1,2,3)
fav=c(65,85,120)
unfav=c(20,32,95)
newdf=data.frame(Stress, fav, unfav)
newdf
#fit the logistic
df.logit=glm(cbind(unfav, fav)~Stress, family=binomial(), data=newdf )
summary(df.logit)
confint(df.logit,level = 0.98,method = "Wald")
# Pearson Residuals
df.logit$residuals
# Standard Residuals
stdres = df.logit$stdres
mosaic(df5, gp = shading_Friendly, residuals = stdres, residuals_type = "Std\nresiduals", labeling = labeling_residuals)
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
Pearson
# Standard Residuals
StdRes = rstandard(df.logit)
StdRes
mosaic(df5, gp = shading_Friendly, residuals = stdres, residuals_type = "Std\nresiduals", labeling = labeling_residuals)
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values")
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
Pearson
# Standard Residuals
StdRes = rstandard(df.logit)
StdRes
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values")
abline(h = 0, col = "red")
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values", main = "Standardized Residuals Plot")
abline(h = 0, col = "blue")
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
Pearson
# Standard Residuals
StdRes = rstandard(df.logit)
StdRes
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values", main = "Standardized Residuals Plot")
abline(h = 0, col = "blue")
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
Pearson
# Standard Residuals
StdRes = rstandard(df.logit)
StdRes
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values", main = "Standardized Residuals Plot")
abline(h = 0, col = "blue")
plot(Pearson ~ fitted(df.logit), ylab = "Pearson Residuals", xlab = "Fitted Values", main = "Pearson Residuals Plot")
abline(h = 0, col = "blue")
# Pearson Residuals
Pearson = residuals(df.logit,type = "pearson")
Pearson
# Standard Residuals
StdRes = rstandard(df.logit)
StdRes
plot(Pearson ~ fitted(df.logit), ylab = "Pearson Residuals", xlab = "Fitted Values", main = "Pearson Residuals Plot")
abline(h = 0, col = "blue")
plot(StdRes ~ fitted(df.logit), ylab = "Standardized Residuals", xlab = "Fitted Values", main = "Standardized Residuals Plot")
abline(h = 0, col = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(glmtoolbox)
zeroAlcohol <- 0.002555 + (0.00109*0)
zeroAlcohol
sevenAlcohol <- 0.00255 + (0.00109*7)
sevenAlcohol
# rr for 0 Alcohol level
zeroAlcohol / sevenAlcohol
## rr for 7.0 Alcohol level
sevenAlcohol / zeroAlcohol
knitr::opts_chunk$set(echo = TRUE)
.01018/.00255
malform = c(17066, 48, 14464, 38, 788, 5, 126, 1, 37, 1)
malform = matrix(malform, byrow = TRUE, nrow = 5)
malform = as.data.frame(malform)
malform$alcohol = c(0, 1, 2, 3, 4)
names(malform)[1:2] = c("Absent", "Present")
rownames(malform) = c("0", "<1", "1-2", "3-5", "5-6")
malform
#glm
malf.ident = glm(cbind(Present, Absent) ~ alcohol, family= binomial(link="identity"), data=malform)
summary(malf.ident)
zeroAlcoholN <- 0.0025977 + (0.0005044*0)
zeroAlcoholN
sevenAlcoholN <- 0.0025977 + (0.0005044*7)
sevenAlcoholN
# rr for 0 Alcohol level
zeroAlcoholN / sevenAlcoholN
## rr for 7.0 Alcohol level
sevenAlcoholN / zeroAlcoholN
malform = c(17066, 48, 14464, 38, 788, 5, 126, 1, 37, 1)
malform = matrix(malform, byrow = TRUE, nrow = 5)
malform = as.data.frame(malform)
malform$alcohol = c(0, 1, 2, 3, 4)
names(malform)[1:2] = c("Absent", "Present")
rownames(malform) = c("0", "<1", "1-2", "3-5", "5-6")
malform
#glm
malf.ident = glm(cbind(Present, Absent) ~ alcohol, family= binomial(link="identity"), data=malform)
summary(malf.ident)
zeroAlcoholN <- 0.0025977 + (0.0005044*0)
zeroAlcoholN
sevenAlcoholN <- 0.0025977 + (0.0005044*7)
sevenAlcoholN
# rr for 0 Alcohol level
zeroAlcoholN / sevenAlcoholN
## rr for 7.0 Alcohol level
sevenAlcoholN / zeroAlcoholN
df3 = c(17066, 48, 14464, 38, 788, 5, 126, 1, 37, 1)
df3 = matrix(df3, byrow = TRUE, nrow = 5)
df3 = as.data.frame(df3)
df3$alcohol = c(0, 1, 2, 3, 4)
names(df3)[1:2] = c("Absent", "Present")
rownames(df3) = c("0", "<1", "1-2", "3-5", "5-6")
df3
#glm
malf.ident = glm(cbind(Present, Absent) ~ alcohol, family= binomial(link="identity"), data=df3)
summary(malf.ident)
df3 = c(17066, 48, 14464, 38, 788, 5, 126, 1, 37, 1)
df3 = matrix(df3, byrow = TRUE, nrow = 5)
df3 = as.data.frame(df3)
df3$alcohol = c(0, 1, 2, 3, 4)
names(df3)[1:2] = c("Absent", "Present")
rownames(df3) = c("0", "<1", "1-2", "3-5", "5-6")
df3
#glm
malform.logit = glm(cbind(Present, Absent) ~ alcohol, family= binomial(link="identity"), data=df3)
summary(malf.ident)
0.0025977 + (0.0005044*0)
0.0025977 + (0.0005044*7)
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crabs = glm(sat ~ weight, data = crab)
summary(crabs)
ey <- -1.9911 + 2.0147*5.2
ey
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.glm = glm(sat ~ weight, data = crab)
summary(crab.glm)
ey <- -1.9911 + 2.0147*5.2
ey
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.glm = glm(sat ~ weight, data = crab)
summary(crab.glm)
-1.9911 + 2.0147*5.2
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab$satNew = ifelse(crab$sat == 0, 0, 1)
crabProbit = glm(satNew ~ weight, family = binomial(link="probit"), data = crab)
summary(crabProbit)
y <- -2.2383 + 1.0990*5.2
y
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.glm = lm(sat ~ weight, data = crab)
summary(crab.glm)
-1.9911 + 2.0147*5.2
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.lm = lm(sat ~ weight, data = crab)
summary(crab.lm)
-1.9911 + 2.0147*5.2
crab.logit <- glm(y ~ weight, data = crab, family = binomial(link = "logit"))
summary(crab.logit)
crab.logit <- glm(y ~ weight, data = crab, family = binomial(link = "logit"))
summary(crab.logit)
-3.6947+1.8151*5.2
log_reg_pred <- predict(crab.logit, newdata = data.frame(weight = 5.20), type = "response")
log_reg_pred
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.lm = lm(sat ~ weight, data = crab)
summary(crab.lm)
lin_prob_pred <- predict(crab.lm, newdata = data.frame(weight = 5.20))
lin_prob_pred
predict.log <- predict(crab.logit, newdata = data.frame(weight = 5.20), type = "response")
predict.log
```{r}
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
fit <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(fit, level = 0.95, method = "Wald")
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
fit <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(fit, level = 0.95, method = "Wald")
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
fit <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(fit, level = 0.95, method = "Wald")
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
fit <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(fit, level = 0.95, method = "Wald")
Heart
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
Heart.glm <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(Heart.glm, level = 0.95, method = "Wald")
df3 = c(17066, 48, 14464, 38, 788, 5, 126, 1, 37, 1)
df3 = matrix(df3, byrow = TRUE, nrow = 5)
df3 = as.data.frame(df3)
df3$alcohol = c(0, 1, 2, 3, 4)
names(df3)[1:2] = c("Absent", "Present")
rownames(df3) = c("0", "<1", "1-2", "3-5", "5-6")
df3
#glm
df3.logit = glm(cbind(Present, Absent) ~ alcohol, family= binomial(link="identity"), data=df3)
summary(df3.logit)
0.0025977 + (0.0005044*0)
0.0025977 + (0.0005044*7)
libray(dplyr)
library(dplyr)
Heart <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Heart.dat", header=TRUE)
Heart$x <- recode(Heart$snoring, never = 0, occasional = 2,
nearly_every_night = 4, every_night = 5)
n <- Heart$yes + Heart$no
Heart.glm <- glm(yes/n ~ x, family=binomial(link=logit), weights=n, data=Heart)
summary(fit)
# Wald's Confidence Interval
confint(Heart.glm, level = 0.95, method = "Wald")
knitr::opts_chunk$set(echo = TRUE)
hist(mtcars$mpg, breaks = 10,
main = "Distribution of MPG",
xlab = "MPG",
ylab = "Frequency")
print("Most of the cars in this data set are in the class of ___15___ mile per gallon.")
crab <- read.table("https://users.stat.ufl.edu/~aa/cat/data/Crabs.dat", header=TRUE)
crab
crab.lm = lm(y ~ weight, data = crab)
summary(crab.lm)
lin_prob_pred <- predict(crab.lm, newdata = data.frame(weight = 5.20))
lin_prob_pred
setwd("C:/Users/macho/Desktop/Git_Repo/We-R-Finished/russellfolder/data")
library(car)
library(readr)
library(readxl)
library(dplyr)
salary <- read_excel("salary_data_states.xlsx")
#names(salary)
#dim(salary)
colnames(salary)[19] = "Work_State"
colnames(salary)[26] = "Job_Title_Sub"
# filtering
sal <- salary %>%
filter(!grepl("professor", `Job_Title_Sub`, ignore.case = TRUE) &
!grepl("attorney", `Job_Title_Sub`, ignore.case = TRUE) &
!grepl("assistant professor", `Job_Title_Sub`, ignore.case = TRUE) &
!grepl("teacher", `Job_Title_Sub`, ignore.case = TRUE))
datsal <- sal %>%
filter(!grepl("Guam", `Work_State`, ignore.case = TRUE) &
!grepl("Guamam", `Work_State`, ignore.case = TRUE) &
!grepl("Palau", `Work_State`, ignore.case = TRUE) &
!grepl("Northern Mariana Islands", `Work_State`, ignore.case = TRUE) &
!grepl("Puerto Rico", `Work_State`, ignore.case = TRUE) &
!grepl("Virgin Islands", `Work_State`, ignore.case = TRUE))
# reading CoL dataset
COL <- read_csv("CostOfLiving2023.csv", show_col_types = FALSE)
coldf <- COL[, !(names(COL) %in% c("fips"))]
head(coldf)
# subset
costate <- subset(coldf, select = c(state, costIndex))
# merging
salcost <- merge(datsal, costate,  by.x = "Work_State", by.y = "state")
#head(salcost)
salcost$ADJUSTED_WAGE <- (salcost$PAID_WAGE_PER_YEAR / salcost$costIndex)*100
# new subset
salcost <- salcost[, c("EMPLOYER_NAME", "Job_Title_Sub", "Work_State", "PAID_WAGE_PER_YEAR", "ADJUSTED_WAGE", "costIndex", "WORK_STATE_ABBREVIATION")]
:raised_hands:
1
salcost
ncost(salcost)
ncol(salcost)
nrow(salcost)
library("writexl")
write_xlsx(salcost,"C:/Users/macho/Desktop/Git_Repo/We-R-Finished/russellfolder/data/salcost.xlsx")
write.csv(salcost,"C:/Users/macho/Desktop/Git_Repo/We-R-Finished/russellfolder/data/salcost.xlsx")
knitr::opts_chunk$set(echo = TRUE)
